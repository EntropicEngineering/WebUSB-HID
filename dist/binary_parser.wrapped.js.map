{"version":3,"sources":["webpack:///webpack/bootstrap 294bd17f01adc58356a6","webpack:///./node_modules/binary-parser/lib/binary_parser.js","webpack:///./node_modules/binary-parser/lib/context.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,2CAA2C,eAAe;AAC1D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA,iDAAiD;AACjD;AACA,mBAAmB;;AAEnB;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,8BAA8B,EAAE,WAAW;AAC3C,KAAK;AACL,kCAAkC;AAClC;;AAEA;AACA;;AAEA;AACA,iCAAiC;;AAEjC;AACA,qDAAqD;AACrD,KAAK;AACL,oCAAoC;AACpC;;AAEA;;AAEA;;AAEA,8BAA8B;AAC9B;;AAEA;AACA,4BAA4B,EAAE,UAAU;;AAExC;AACA,qDAAqD;AACrD,KAAK;AACL,oCAAoC;AACpC;;AAEA;;AAEA;AACA;;AAEA,0BAA0B,gCAAgC;AAC1D,mBAAmB;;AAEnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA,KAAK;AACL;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iCAAiC,EAAE,cAAc,EAAE,IAAI;AACvD;AACA;AACA,+BAA+B,EAAE,MAAM,EAAE,GAAG;AAC5C;AACA;AACA,gCAAgC,EAAE,OAAO,EAAE,GAAG;AAC9C;AACA;AACA;AACA;AACA,uCAAuC,EAAE,SAAS,EAAE;AACpD,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,EAAE,eAAe,EAAE,SAAS;AACnD,iCAAiC,GAAG;AACpC;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA,+BAA+B,EAAE,4BAA4B;AAC7D;AACA,SAAS;AACT,+BAA+B,EAAE,+BAA+B;AAChE;AACA,SAAS;AACT;AACA;AACA,+BAA+B,EAAE,+BAA+B;AAChE,+BAA+B,EAAE,gCAAgC;AACjE,+BAA+B,EAAE,KAAK,EAAE,UAAU,GAAG;AACrD;AACA,SAAS;AACT,+BAA+B,EAAE,+BAA+B;AAChE;AACA,SAAS;AACT;AACA;AACA,iCAAiC,GAAG;;AAEpC;AACA;AACA;AACA,2BAA2B,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,GAAG;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,GAAG;AAChC;;AAEA;AACA;AACA;;AAEA;AACA,2BAA2B,EAAE,UAAU;AACvC,0EAA0E,EAAE,KAAK,EAAE,EAAE;AACrF;AACA;AACA;AACA,uBAAuB,EAAE,sBAAsB,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,wBAAwB;AACpG;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,uBAAuB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,EAAE;AAC3E;AACA;AACA;AACA;AACA,iCAAiC,GAAG;AACpC,KAAK;AACL,2BAA2B,EAAE,UAAU;AACvC,8DAA8D;AAC9D,uBAAuB,EAAE,sBAAsB,EAAE,KAAK,EAAE,cAAc;AACtE;AACA;AACA;AACA;AACA,KAAK;AACL,2BAA2B,EAAE,UAAU;AACvC,sDAAsD;AACtD,uBAAuB,EAAE,sBAAsB,EAAE,KAAK,EAAE,UAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE,IAAI,EAAE;AAC/B;AACA;;AAEA;AACA;AACA,uBAAuB,EAAE,wBAAwB;AACjD;AACA;AACA,KAAK;AACL,uBAAuB,EAAE,kCAAkC,EAAE,EAAE;AAC/D;AACA;AACA;AACA,iCAAiC,GAAG;AACpC;;AAEA;AACA;;AAEA,2BAA2B,EAAE,eAAe,EAAE,SAAS;AACvD,uBAAuB,EAAE,OAAO,EAAE,EAAE;AACpC,uBAAuB,EAAE,IAAI,EAAE;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,EAAE,MAAM;AAC/B,KAAK;AACL,uBAAuB,EAAE,MAAM;AAC/B;AACA;AACA,0BAA0B;AAC1B,KAAK;AACL,gCAAgC,EAAE,KAAK,wBAAwB,EAAE,EAAE,KAAK;AACxE,KAAK;AACL,gCAAgC,EAAE,UAAU,WAAW,EAAE,IAAI,GAAG,IAAI;AACpE,KAAK;AACL,gCAAgC,EAAE,KAAK,EAAE,EAAE,IAAI,GAAG,EAAE,EAAE,KAAK;AAC3D;;AAEA;AACA;AACA,+BAA+B,EAAE,eAAe,EAAE,SAAS;AAC3D,qCAAqC,GAAG;AACxC,SAAS;AACT;AACA,+BAA+B,EAAE,IAAI,EAAE,SAAS;AAChD,+BAA+B,EAAE,IAAI,EAAE,QAAQ,WAAW,EAAE,QAAQ;AACpE;AACA;AACA,KAAK;AACL,2BAA2B,EAAE,MAAM;;AAEnC;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,GAAG;AACzC,KAAK;AACL,uBAAuB,EAAE,OAAO,EAAE,EAAE;AACpC;;AAEA,mBAAmB;;AAEnB;AACA,iCAAiC,EAAE,cAAc,EAAE,yBAAyB;AAC5E;AACA;;AAEA;AACA;AACA;AACA,2BAA2B,EAAE,eAAe,EAAE,SAAS;AACvD,qCAAqC,GAAG;AACxC,SAAS;AACT;AACA,+BAA+B,EAAE,IAAI,EAAE,SAAS;AAChD,2BAA2B,EAAE,IAAI,EAAE,QAAQ,WAAW,EAAE,QAAQ;AAChE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,EAAE,MAAM;AAC/B;AACA,0BAA0B,EAAE,GAAG;AAC/B;AACA;;AAEA,4BAA4B,EAAE;AAC9B;AACA,4BAA4B;AAC5B,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,yDAAyD,EAAE;AAC3D;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA,uBAAuB,EAAE,MAAM;AAC/B;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B,EAAE,IAAI,EAAE,SAAS;AAC5C,uBAAuB,EAAE,IAAI,EAAE,QAAQ,WAAW,EAAE,QAAQ;AAC5D;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;AAClD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACzpBA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,2DAA2D,wCAAwC,EAAE,EAAE;AACvG,KAAK;AACL,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,I;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8BAA8B;AAC9B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA,eAAe,IAAI;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA","file":"binary_parser.wrapped.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 294bd17f01adc58356a6","//========================================================================================\n// Globals\n//========================================================================================\n\nvar Context = require(\"./context\").Context;\n\nvar PRIMITIVE_TYPES = {\n    'UInt8'    : 1,\n    'UInt16LE' : 2,\n    'UInt16BE' : 2,\n    'UInt32LE' : 4,\n    'UInt32BE' : 4,\n    'Int8'     : 1,\n    'Int16LE'  : 2,\n    'Int16BE'  : 2,\n    'Int32LE'  : 4,\n    'Int32BE'  : 4,\n    'FloatLE'  : 4,\n    'FloatBE'  : 4,\n    'DoubleLE' : 8,\n    'DoubleBE' : 8\n};\n\nvar SPECIAL_TYPES = {\n    'String'   : null,\n    'Buffer'   : null,\n    'Array'    : null,\n    'Skip'     : null,\n    'Choice'   : null,\n    'Nest'     : null,\n    'Bit'      : null\n};\n\nvar aliasRegistry = {};\nvar FUNCTION_PREFIX = '___parser_';\n\nvar BIT_RANGE = [];\n(function() {\n    var i;\n    for (i = 1; i <= 32; i++) {\n        BIT_RANGE.push(i);\n    }\n})();\n\n// Converts Parser's method names to internal type names\nvar NAME_MAP = {};\nObject.keys(PRIMITIVE_TYPES)\n    .concat(Object.keys(SPECIAL_TYPES))\n    .forEach(function(type) {\n        NAME_MAP[type.toLowerCase()] = type;\n    });\n\n//========================================================================================\n// class Parser\n//========================================================================================\n\n//----------------------------------------------------------------------------------------\n// constructor\n//----------------------------------------------------------------------------------------\n\nvar Parser = function() {\n    this.varName = '';\n    this.type = '';\n    this.options = {};\n    this.next = null;\n    this.head = null;\n    this.compiled = null;\n    this.endian = 'be';\n    this.constructorFn = null;\n    this.alias = null;\n};\n\n//----------------------------------------------------------------------------------------\n// public methods\n//----------------------------------------------------------------------------------------\n\nParser.start = function() {\n    return new Parser();\n};\n\nObject.keys(PRIMITIVE_TYPES)\n    .forEach(function(type) {\n        Parser.prototype[type.toLowerCase()] = function(varName, options) {\n            return this.setNextParser(type.toLowerCase(), varName, options);\n        };\n\n        var typeWithoutEndian = type.replace(/BE|LE/, '').toLowerCase();\n        if (!(typeWithoutEndian in Parser.prototype)) {\n            Parser.prototype[typeWithoutEndian] = function(varName, options) {\n                return this[typeWithoutEndian + this.endian](varName, options);\n            };\n        }\n    });\n\nBIT_RANGE.forEach(function(i) {\n    Parser.prototype['bit' + i.toString()] = function(varName, options) {\n        if (!options) {\n            options = {};\n        }\n        options.length = i;\n        return this.setNextParser('bit', varName, options);\n    };\n});\n\nParser.prototype.namely = function(alias) {\n    aliasRegistry[alias] = this;\n    this.alias = alias;\n    return this;\n}\n\nParser.prototype.skip = function(length, options) {\n    if (options && options.assert) {\n        throw new Error('assert option on skip is not allowed.');\n    }\n\n    return this.setNextParser('skip', '', {length: length});\n};\n\nParser.prototype.string = function(varName, options) {\n    if (!options.zeroTerminated && !options.length && !options.greedy) {\n        throw new Error('Neither length, zeroTerminated, nor greedy is defined for string.');\n    }\n    if ((options.zeroTerminated || options.length) && options.greedy) {\n        throw new Error('greedy is mutually exclusive with length and zeroTerminated for string.');\n    }\n    if (options.stripNull && !(options.length || options.greedy)) {\n        throw new Error('Length or greedy must be defined if stripNull is defined.');\n    }\n    options.encoding = options.encoding || 'utf8';\n\n    return this.setNextParser('string', varName, options);\n};\n\nParser.prototype.buffer = function(varName, options) {\n    if (!options.length && !options.readUntil) {\n        throw new Error('Length nor readUntil is defined in buffer parser');\n    }\n\n    return this.setNextParser('buffer', varName, options);\n};\n\nParser.prototype.array = function(varName, options) {\n    if (!options.readUntil && !options.length && !options.lengthInBytes) {\n        throw new Error('Length option of array is not defined.');\n    }\n    if (!options.type) {\n        throw new Error('Type option of array is not defined.');\n    }\n    if ((typeof options.type === 'string') && !aliasRegistry[options.type]\n        && Object.keys(PRIMITIVE_TYPES).indexOf(NAME_MAP[options.type]) < 0) {\n        throw new Error('Specified primitive type \"' + options.type + '\" is not supported.');\n    }\n\n    return this.setNextParser('array', varName, options);\n};\n\nParser.prototype.choice = function(varName, options) {\n    if (!options.tag) {\n        throw new Error('Tag option of array is not defined.');\n    }\n    if (!options.choices) {\n        throw new Error('Choices option of array is not defined.');\n    }\n    Object.keys(options.choices).forEach(function(key) {\n        if (isNaN(parseInt(key, 10))) {\n            throw new Error('Key of choices must be a number.');\n        }\n        if (!options.choices[key]) {\n            throw new Error('Choice Case ' + key + ' of ' + varName + ' is not valid.');\n        }\n\n        if ((typeof options.choices[key] === 'string') && !aliasRegistry[options.choices[key]]\n            && (Object.keys(PRIMITIVE_TYPES).indexOf(NAME_MAP[options.choices[key]]) < 0)) {\n            throw new Error('Specified primitive type \"' +  options.choices[key] + '\" is not supported.');\n        }\n    }, this);\n\n    return this.setNextParser('choice', varName, options);\n};\n\nParser.prototype.nest = function(varName, options) {\n    if (!options.type) {\n        throw new Error('Type option of nest is not defined.');\n    }\n\n    if (!(options.type instanceof Parser) && !aliasRegistry[options.type]) {\n        throw new Error('Type option of nest must be a Parser object.');\n    }\n\n    return this.setNextParser('nest', varName, options);\n};\n\nParser.prototype.endianess = function(endianess) {\n    switch (endianess.toLowerCase()) {\n    case 'little':\n        this.endian = 'le';\n        break;\n    case 'big':\n        this.endian = 'be';\n        break;\n    default:\n        throw new Error('Invalid endianess: ' + endianess);\n    }\n\n    return this;\n};\n\nParser.prototype.create = function(constructorFn) {\n    if (!(constructorFn instanceof Function)) {\n        throw new Error('Constructor must be a Function object.');\n    }\n\n    this.constructorFn = constructorFn;\n\n    return this;\n};\n\nParser.prototype.getCode = function() {\n    var ctx = new Context();\n\n    ctx.pushCode('if (!Buffer.isBuffer(buffer)) {');\n    ctx.generateError('\"argument buffer is not a Buffer object\"');\n    ctx.pushCode('}');\n\n    if (!this.alias) {\n        this.addRawCode(ctx);\n    } else {\n        this.addAliasedCode(ctx);\n    }\n\n    if (this.alias) {\n        ctx.pushCode('return {0}(0).result;', FUNCTION_PREFIX + this.alias);\n    } else {\n        ctx.pushCode('return vars;');\n    }\n\n    return ctx.code;\n};\n\nParser.prototype.addRawCode = function(ctx) {\n    ctx.pushCode('var offset = 0;');\n\n    if (this.constructorFn) {\n        ctx.pushCode('var vars = new constructorFn();');\n    } else {\n        ctx.pushCode('var vars = {};');\n    }\n\n    this.generate(ctx);\n\n    this.resolveReferences(ctx);\n\n    ctx.pushCode('return vars;');\n};\n\nParser.prototype.addAliasedCode = function(ctx) {\n    ctx.pushCode('function {0}(offset) {', FUNCTION_PREFIX + this.alias);\n\n    if (this.constructorFn) {\n        ctx.pushCode('var vars = new constructorFn();');\n    } else {\n        ctx.pushCode('var vars = {};');\n    }\n\n    this.generate(ctx);\n\n    ctx.markResolved(this.alias);\n    this.resolveReferences(ctx);\n\n    ctx.pushCode('return { offset: offset, result: vars };');\n    ctx.pushCode('}');\n\n    return ctx;\n};\n\nParser.prototype.resolveReferences = function(ctx) {\n    var references = ctx.getUnresolvedReferences();\n    ctx.markRequested(references);\n    references.forEach(function(alias) {\n        var parser = aliasRegistry[alias];\n        parser.addAliasedCode(ctx);\n    });\n};\n\nParser.prototype.compile = function() {\n    this.compiled = new Function('buffer', 'callback', 'constructorFn', this.getCode());\n};\n\nParser.prototype.sizeOf = function() {\n    var size = NaN;\n\n    if (Object.keys(PRIMITIVE_TYPES).indexOf(this.type) >= 0) {\n        size = PRIMITIVE_TYPES[this.type];\n\n    // if this is a fixed length string\n    } else if (this.type === 'String' && typeof this.options.length === 'number') {\n        size = this.options.length;\n\n    // if this is a fixed length buffer\n    } else if (this.type === 'Buffer' && typeof this.options.length === 'number') {\n        size = this.options.length;\n\n    // if this is a fixed length array\n    } else if (this.type === 'Array' && typeof this.options.length === 'number') {\n        var elementSize = NaN;\n        if (typeof this.options.type === 'string'){\n            elementSize = PRIMITIVE_TYPES[NAME_MAP[this.options.type]];\n        } else if (this.options.type instanceof Parser) {\n            elementSize = this.options.type.sizeOf();\n        }\n        size = this.options.length * elementSize;\n\n    // if this a skip\n    } else if (this.type === 'Skip') {\n        size = this.options.length;\n\n    // if this is a nested parser\n    } else if (this.type === 'Nest') {\n        size = this.options.type.sizeOf();\n    } else if (!this.type) {\n        size = 0;\n    }\n\n    if (this.next) {\n        size += this.next.sizeOf();\n    }\n\n    return size;\n};\n\n// Follow the parser chain till the root and start parsing from there\nParser.prototype.parse = function(buffer, callback) {\n    if (!this.compiled) {\n        this.compile();\n    }\n\n    return this.compiled(buffer, callback, this.constructorFn);\n};\n\n//----------------------------------------------------------------------------------------\n// private methods\n//----------------------------------------------------------------------------------------\n\nParser.prototype.setNextParser = function(type, varName, options) {\n    var parser = new Parser();\n\n    parser.type = NAME_MAP[type];\n    parser.varName = varName;\n    parser.options = options || parser.options;\n    parser.endian = this.endian;\n\n    if (this.head) {\n        this.head.next = parser;\n    } else {\n        this.next = parser;\n    }\n    this.head = parser;\n\n    return this;\n};\n\n// Call code generator for this parser\nParser.prototype.generate = function(ctx) {\n    if (this.type) {\n        this['generate' + this.type](ctx);\n        this.generateAssert(ctx);\n    }\n\n    var varName = ctx.generateVariable(this.varName);\n    if (this.options.formatter) {\n        this.generateFormatter(ctx, varName, this.options.formatter);\n    }\n\n    return this.generateNext(ctx);\n};\n\nParser.prototype.generateAssert = function(ctx) {\n    if (!this.options.assert) {\n        return;\n    }\n\n    var varName = ctx.generateVariable(this.varName);\n\n    switch (typeof this.options.assert) {\n        case 'function':\n            ctx.pushCode('if (!({0}).call(vars, {1})) {', this.options.assert, varName);\n        break;\n        case 'number':\n            ctx.pushCode('if ({0} !== {1}) {', this.options.assert, varName);\n        break;\n        case 'string':\n            ctx.pushCode('if (\"{0}\" !== {1}) {', this.options.assert, varName);\n        break;\n        default:\n            throw new Error('Assert option supports only strings, numbers and assert functions.');\n    }\n    ctx.generateError('\"Assert error: {0} is \" + {0}', varName);\n    ctx.pushCode('}');\n};\n\n// Recursively call code generators and append results\nParser.prototype.generateNext = function(ctx) {\n    if (this.next) {\n        ctx = this.next.generate(ctx);\n    }\n\n    return ctx;\n};\n\nObject.keys(PRIMITIVE_TYPES).forEach(function(type) {\n    Parser.prototype['generate' + type] = function(ctx) {\n        ctx.pushCode('{0} = buffer.read{1}(offset);', ctx.generateVariable(this.varName), type);\n        ctx.pushCode('offset += {0};', PRIMITIVE_TYPES[type]);\n    };\n});\n\nParser.prototype.generateBit = function(ctx) {\n    // TODO find better method to handle nested bit fields\n    var parser = JSON.parse(JSON.stringify(this));\n    parser.varName = ctx.generateVariable(parser.varName);\n    ctx.bitFields.push(parser);\n\n    if (!this.next || (this.next && ['Bit', 'Nest'].indexOf(this.next.type) < 0)) {\n        var sum = 0;\n        ctx.bitFields.forEach(function(parser) {\n            sum += parser.options.length;\n        });\n\n        var val = ctx.generateTmpVariable();\n\n        if (sum <= 8) {\n            ctx.pushCode('var {0} = buffer.readUInt8(offset);', val);\n            sum = 8;\n        } else if (sum <= 16) {\n            ctx.pushCode('var {0} = buffer.readUInt16BE(offset);', val);\n            sum = 16;\n        } else if (sum <= 24) {\n            var val1 = ctx.generateTmpVariable();\n            var val2 = ctx.generateTmpVariable();\n            ctx.pushCode('var {0} = buffer.readUInt16BE(offset);', val1);\n            ctx.pushCode('var {0} = buffer.readUInt8(offset + 2);', val2);\n            ctx.pushCode('var {2} = ({0} << 8) | {1};', val1, val2, val);\n            sum = 24;\n        } else if (sum <= 32) {\n            ctx.pushCode('var {0} = buffer.readUInt32BE(offset);', val);\n            sum = 32;\n        } else {\n            throw new Error('Currently, bit field sequence longer than 4-bytes is not supported.');\n        }\n        ctx.pushCode('offset += {0};', sum / 8);\n\n        var bitOffset = 0;\n        var isBigEndian = this.endian === 'be';\n        ctx.bitFields.forEach(function(parser) {\n            ctx.pushCode('{0} = {1} >> {2} & {3};',\n                parser.varName,\n                val,\n                isBigEndian ? sum - bitOffset - parser.options.length : bitOffset,\n                (1 << parser.options.length) - 1\n            );\n            bitOffset += parser.options.length;\n        });\n\n        ctx.bitFields = [];\n    }\n};\n\nParser.prototype.generateSkip = function(ctx) {\n    var length = ctx.generateOption(this.options.length);\n    ctx.pushCode('offset += {0};', length);\n};\n\nParser.prototype.generateString = function(ctx) {\n    var name = ctx.generateVariable(this.varName);\n    var start = ctx.generateTmpVariable();\n\n    if (this.options.length && this.options.zeroTerminated) {\n        ctx.pushCode('var {0} = offset;', start);\n        ctx.pushCode('while(buffer.readUInt8(offset++) !== 0 && offset - {0}  < {1});',\n            start,\n            this.options.length\n        );\n        ctx.pushCode('{0} = buffer.toString(\\'{1}\\', {2}, offset - {2} < {3} ? offset - 1 : offset);',\n            name,\n            this.options.encoding,\n            start,\n            this.options.length\n        );\n    } else if(this.options.length) {\n        ctx.pushCode('{0} = buffer.toString(\\'{1}\\', offset, offset + {2});',\n                            name,\n                            this.options.encoding,\n                            ctx.generateOption(this.options.length)\n                        );\n        ctx.pushCode('offset += {0};', ctx.generateOption(this.options.length));\n    } else if (this.options.zeroTerminated) {\n        ctx.pushCode('var {0} = offset;', start);\n        ctx.pushCode('while(buffer.readUInt8(offset++) !== 0);');\n        ctx.pushCode('{0} = buffer.toString(\\'{1}\\', {2}, offset - 1);',\n            name,\n            this.options.encoding,\n            start\n        );\n    } else if (this.options.greedy) {\n        ctx.pushCode('var {0} = offset;', start);\n        ctx.pushCode('while(buffer.length > offset++);');\n        ctx.pushCode('{0} = buffer.toString(\\'{1}\\', {2}, offset);',\n            name,\n            this.options.encoding,\n            start\n        );\n    }\n    if(this.options.stripNull) {\n        ctx.pushCode('{0} = {0}.replace(/\\\\x00+$/g, \\'\\')', name);\n    }\n};\n\nParser.prototype.generateBuffer = function(ctx) {\n    if (this.options.readUntil === 'eof') {\n        ctx.pushCode('{0} = buffer.slice(offset);',\n            ctx.generateVariable(this.varName)\n            );\n    } else {\n        ctx.pushCode('{0} = buffer.slice(offset, offset + {1});',\n            ctx.generateVariable(this.varName),\n            ctx.generateOption(this.options.length)\n            );\n        ctx.pushCode('offset += {0};', ctx.generateOption(this.options.length));\n    }\n\n    if (this.options.clone) {\n        var buf = ctx.generateTmpVariable();\n\n        ctx.pushCode('var {0} = new Buffer({1}.length);', buf, ctx.generateVariable(this.varName));\n        ctx.pushCode('{0}.copy({1});', ctx.generateVariable(this.varName), buf);\n        ctx.pushCode('{0} = {1}', ctx.generateVariable(this.varName), buf);\n    }\n};\n\nParser.prototype.generateArray = function(ctx) {\n    var length = ctx.generateOption(this.options.length);\n    var lengthInBytes = ctx.generateOption(this.options.lengthInBytes);\n    var type = this.options.type;\n    var counter = ctx.generateTmpVariable();\n    var lhs = ctx.generateVariable(this.varName);\n    var item = ctx.generateTmpVariable();\n    var key = this.options.key;\n    var isHash = typeof key === 'string';\n\n    if (isHash) {\n        ctx.pushCode('{0} = {};', lhs);\n    } else {\n        ctx.pushCode('{0} = [];', lhs);\n    }\n    if (typeof this.options.readUntil === 'function') {\n        ctx.pushCode('do {');\n    } else if (this.options.readUntil === 'eof') {\n        ctx.pushCode('for (var {0} = 0; offset < buffer.length; {0}++) {', counter);\n    } else if (lengthInBytes !== undefined) {\n        ctx.pushCode('for (var {0} = offset; offset - {0} < {1}; ) {', counter, lengthInBytes);\n    } else {\n        ctx.pushCode('for (var {0} = 0; {0} < {1}; {0}++) {', counter, length);\n    }\n\n    if (typeof type === 'string') {\n        if (!aliasRegistry[type]) {\n            ctx.pushCode('var {0} = buffer.read{1}(offset);', item, NAME_MAP[type]);\n            ctx.pushCode('offset += {0};', PRIMITIVE_TYPES[NAME_MAP[type]]);\n        } else {\n            var tempVar = ctx.generateTmpVariable();\n            ctx.pushCode('var {0} = {1}(offset);', tempVar, FUNCTION_PREFIX + type);\n            ctx.pushCode('var {0} = {1}.result; offset = {1}.offset;', item, tempVar);\n            if (type !== this.alias) ctx.addReference(type);\n        }\n    } else if (type instanceof Parser) {\n        ctx.pushCode('var {0} = {};', item);\n\n        ctx.pushScope(item);\n        type.generate(ctx);\n        ctx.popScope();\n    }\n\n    if (isHash) {\n        ctx.pushCode('{0}[{2}.{1}] = {2};', lhs, key, item);\n    } else {\n        ctx.pushCode('{0}.push({1});', lhs, item);\n    }\n\n    ctx.pushCode('}');\n\n    if (typeof this.options.readUntil === 'function') {\n        ctx.pushCode(' while (!({0}).call(this, {1}, buffer.slice(offset)));', this.options.readUntil, item);\n    }\n};\n\nParser.prototype.generateChoiceCase = function(ctx, varName, type) {\n    if (typeof type === 'string') {\n        if (!aliasRegistry[type]) {\n            ctx.pushCode('{0} = buffer.read{1}(offset);', ctx.generateVariable(this.varName), NAME_MAP[type]);\n            ctx.pushCode('offset += {0};', PRIMITIVE_TYPES[NAME_MAP[type]]);\n        } else {\n            var tempVar = ctx.generateTmpVariable();\n            ctx.pushCode('var {0} = {1}(offset);', tempVar, FUNCTION_PREFIX + type);\n            ctx.pushCode('{0} = {1}.result; offset = {1}.offset;', ctx.generateVariable(this.varName), tempVar);\n            if (type !== this.alias) ctx.addReference(type);\n        }\n    } else if (type instanceof Parser) {\n        ctx.pushPath(varName);\n        type.generate(ctx);\n        ctx.popPath(varName);\n    }\n};\n\nParser.prototype.generateChoice = function(ctx) {\n    var tag = ctx.generateOption(this.options.tag);\n    if (this.varName)\n    {\n        ctx.pushCode('{0} = {};', ctx.generateVariable(this.varName));\n    }\n    ctx.pushCode('switch({0}) {', tag);\n    Object.keys(this.options.choices).forEach(function(tag) {\n        var type = this.options.choices[tag];\n\n        ctx.pushCode('case {0}:', tag);\n        this.generateChoiceCase(ctx, this.varName, type);\n        ctx.pushCode('break;');\n    }, this);\n    ctx.pushCode('default:');\n    if (this.options.defaultChoice) {\n        this.generateChoiceCase(ctx, this.varName, this.options.defaultChoice);\n    } else {\n        ctx.generateError('\"Met undefined tag value \" + {0} + \" at choice\"', tag);\n    }\n    ctx.pushCode('}');\n};\n\nParser.prototype.generateNest = function(ctx) {\n    var nestVar = ctx.generateVariable(this.varName);\n    if (this.options.type instanceof Parser) {\n        ctx.pushCode('{0} = {};', nestVar);\n        ctx.pushPath(this.varName);\n        this.options.type.generate(ctx);\n        ctx.popPath(this.varName);\n    } else if (aliasRegistry[this.options.type]) {\n        var tempVar = ctx.generateTmpVariable();\n        ctx.pushCode('var {0} = {1}(offset);', tempVar, FUNCTION_PREFIX + this.options.type);\n        ctx.pushCode('{0} = {1}.result; offset = {1}.offset;', nestVar, tempVar);\n        if (this.options.type !== this.alias) ctx.addReference(this.options.type);\n    }\n};\n\nParser.prototype.generateFormatter = function(ctx, varName, formatter) {\n    if (typeof formatter === 'function') {\n        ctx.pushCode('{0} = ({1}).call(this, {0});', varName, formatter);\n    }\n};\n\nParser.prototype.isInteger = function() {\n    return !!this.type.match(/U?Int[8|16|32][BE|LE]?|Bit\\d+/);\n};\n\n//========================================================================================\n// Exports\n//========================================================================================\n\nexports.Parser = Parser;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/binary-parser/lib/binary_parser.js\n// module id = 3\n// module chunks = 1","//========================================================================================\n// class Context\n//========================================================================================\n\n//----------------------------------------------------------------------------------------\n// constructor\n//----------------------------------------------------------------------------------------\n\nvar Context = function() {\n    this.code = '';\n    this.scopes = [['vars']];\n    this.isAsync = false;\n    this.bitFields = [];\n    this.tmpVariableCount = 0;\n    this.references = {};\n};\n\n//----------------------------------------------------------------------------------------\n// public methods\n//----------------------------------------------------------------------------------------\n\nContext.prototype.generateVariable = function(name) {\n    var arr = [];\n\n    Array.prototype.push.apply(arr, this.scopes[this.scopes.length - 1]);\n    if (name) {\n        arr.push(name);\n    }\n\n    return arr.join('.');\n};\n\nContext.prototype.generateOption = function(val) {\n    switch(typeof val) {\n        case 'number':\n            return val.toString();\n        case 'string':\n            return this.generateVariable(val);\n        case 'function':\n            return '(' + val + ').call(' + this.generateVariable() + ', vars)';\n    }\n};\n\nContext.prototype.generateError = function() {\n    var args = Array.prototype.slice.call(arguments);\n    var err = Context.interpolate.apply(this, args);\n\n    if (this.isAsync) {\n        this.pushCode('return process.nextTick(function() { callback(new Error(' + err + '), vars); });');\n    } else {\n        this.pushCode('throw new Error(' + err + ');');\n    }\n};\n\nContext.prototype.generateTmpVariable = function() {\n    return '$tmp' + (this.tmpVariableCount++);\n};\n\nContext.prototype.pushCode = function() {\n    var args = Array.prototype.slice.call(arguments);\n\n    this.code += Context.interpolate.apply(this, args) + '\\n';\n};\n\nContext.prototype.pushPath = function(name) {\n    if (name)\n    {\n    \tthis.scopes[this.scopes.length - 1].push(name);\n    }\n};\n\nContext.prototype.popPath = function(name) {\n    if (name)\n   { \n   \tthis.scopes[this.scopes.length - 1].pop();\n   }\n};\n\nContext.prototype.pushScope = function(name) {\n    this.scopes.push([name]);\n};\n\nContext.prototype.popScope = function() {\n    this.scopes.pop();\n};\n\nContext.prototype.addReference = function(alias) {\n    if (this.references[alias]) return;\n    this.references[alias] = { resolved: false, requested: false };\n};\n\nContext.prototype.markResolved = function(alias) {\n    this.references[alias].resolved = true;\n};\n\nContext.prototype.markRequested = function(aliasList) {\n    aliasList.forEach(function(alias) {\n        this.references[alias].requested = true;\n    }.bind(this));\n};\n\nContext.prototype.getUnresolvedReferences = function() {\n    var references = this.references;\n    return Object.keys(this.references).filter(function(alias) {\n        return !references[alias].resolved && !references[alias].requested;\n    });\n};\n\n//----------------------------------------------------------------------------------------\n// private methods\n//----------------------------------------------------------------------------------------\n\nContext.interpolate = function(s) {\n    var re = /{\\d+}/g;\n    var matches = s.match(re);\n    var params = Array.prototype.slice.call(arguments, 1);\n\n    if (matches) {\n        matches.forEach(function(match) {\n            var index = parseInt(match.substr(1, match.length - 2), 10);\n            s = s.replace(match, params[index].toString());\n        });\n    }\n\n    return s;\n};\n\nexports.Context = Context;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/binary-parser/lib/context.js\n// module id = 4\n// module chunks = 1"],"sourceRoot":""}